"""
    --- AUTO-GENERATED DOCSTRING ---
    This docstring is automatically generated by Agent Docstrings.
    Do not modify this block directly.
    
    Classes/Functions:
    - SignatureInfo (line 15):
    - ClassInfo (line 21):
    - CommentStyle (line 29):
      - Functions:
        - remove_agent_docstring(text: str, language: str) -> str (line 48)
    --- END AUTO-GENERATED DOCSTRING ---
"""
from __future__ import annotations

import re
from typing import List, Tuple, Dict, NamedTuple

DOCSTRING_START_MARKER = "--- AUTO-GENERATED DOCSTRING ---"
DOCSTRING_END_MARKER = "--- END AUTO-GENERATED DOCSTRING ---"

class SignatureInfo(NamedTuple):
    """Stores information about a parsed function or method signature."""
    signature: str
    line: int


class ClassInfo(NamedTuple):
    """Stores information about a parsed class, including its methods."""
    name: str
    line: int
    methods: List[SignatureInfo]
    inner_classes: List["ClassInfo"]


class CommentStyle(NamedTuple):
    """Stores language-specific comment delimiters and formatting."""
    start: str
    end: str
    prefix: str  # e.g., ' * ' or '    '


COMMENT_STYLES: Dict[str, CommentStyle] = {
    "python": CommentStyle('"""', '"""', "    "),
    "kotlin": CommentStyle('/**', ' */', ' * '),
    "javascript": CommentStyle('/**', ' */', ' * '),
    "typescript": CommentStyle('/**', ' */', ' * '),
    "csharp": CommentStyle('/*', ' */', ' * '),
    "cpp": CommentStyle('/*', ' */', ' * '),
    "c": CommentStyle('/*', ' */', ' * '),
    "java": CommentStyle('/**', ' */', ' * '),
    "go": CommentStyle('/*', ' */', ' * '),
    "powershell": CommentStyle('<#', '#>', ' # '),
    "delphi": CommentStyle('(*', '*)', ' * '),
}


def remove_agent_docstring(text: str, language: str) -> str:
    """Remove a previously generated docstring from *text*.

    The search uses language-specific comment patterns to find a block
    containing DOCSTRING_START_MARKER and DOCSTRING_END_MARKER at the
    beginning of the file, and removes it.

    Args:
        text (str): Full contents of the source file.
        language (str): Canonical language name (e.g. ``"python"``) used
            to pick the correct comment delimiters from
            :data:`COMMENT_STYLES`.

    Returns:
        str: *text* without the agent docstring block. If no such
        docstring is detected, *text* is returned unchanged.
    """
    style = COMMENT_STYLES[language]
    
    # Pattern to match the entire agent docstring block at the beginning of the file
    # We need to be careful about whitespace and multiline matching
    start_escaped = re.escape(style.start)
    end_escaped = re.escape(style.end)
    start_marker_escaped = re.escape(DOCSTRING_START_MARKER)
    end_marker_escaped = re.escape(DOCSTRING_END_MARKER)
    
    # Only match at the very beginning of the file (after optional shebang)
    # Use \A to match only at the beginning of the string
    pattern = rf'(?s)\A(#!.*?\r?\n)?{start_escaped}.*?{start_marker_escaped}.*?{end_marker_escaped}.*?{end_escaped}\r?\n?'
    
    return re.sub(pattern, r'\1', text, count=1) 